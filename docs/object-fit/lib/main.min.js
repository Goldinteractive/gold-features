(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("js-base"));
	else if(typeof define === 'function' && define.amd)
		define("feature-object-fit", ["js-base"], factory);
	else if(typeof exports === 'object')
		exports["feature-object-fit"] = factory(require("js-base"));
	else
		root["feature-object-fit"] = factory(root["js-base"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jsBase = __webpack_require__(1);

var _objectFitImages = __webpack_require__(2);

var _objectFitImages2 = _interopRequireDefault(_objectFitImages);

var _objectFitVideos = __webpack_require__(3);

var _objectFitVideos2 = _interopRequireDefault(_objectFitVideos);

var _iphoneInlineVideo = __webpack_require__(4);

var _iphoneInlineVideo2 = _interopRequireDefault(_iphoneInlineVideo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CLASS_FEATURE = '.ft-fit-bg';

/**
 * Object fit feature class.
 */

var ObjectFit = function (_features$Feature) {
  _inherits(ObjectFit, _features$Feature);

  function ObjectFit() {
    _classCallCheck(this, ObjectFit);

    return _possibleConstructorReturn(this, (ObjectFit.__proto__ || Object.getPrototypeOf(ObjectFit)).apply(this, arguments));
  }

  _createClass(ObjectFit, [{
    key: 'init',
    value: function init() {
      var _this2 = this;

      this._objectFit = this.node.getAttribute('data-object-fit');
      this._objectPosition = this.node.getAttribute('data-object-position');

      if (this._objectFit && this._objectPosition) {
        this.node.style.objectFit = this._objectFit;
        this.node.style.objectPosition = this._objectPosition;
        this.node.style.fontFamily = '"object-fit: ' + this._objectFit + '; object-position: ' + this._objectPosition + '"';
      } else if (this._objectFit) {
        this.node.style.objectFit = this._objectFit;
        this.node.style.fontFamily = '"object-fit: ' + this._objectFit + '; object-position: ' + this.options.defaultObjectPosition + '"';
      } else if (this._objectPosition) {
        this.node.style.objectPosition = this._objectPosition;
        this.node.style.fontFamily = '"object-fit: ' + this.options.defaultObjectFit + '; object-position: ' + this._objectPosition + '"';
      }

      if (this.node.nodeName.toLowerCase() == 'video') {
        (0, _objectFitVideos2.default)(this.node);
        (0, _iphoneInlineVideo2.default)(this.node, {
          iPad: this.options.iPad
        });

        var onload = function onload() {
          if (_this2.node.readyState >= _this2.node.HAVE_CURRENT_DATA) {
            _this2.removeEventListener(_this2.node, 'loadeddata', onload);
            _this2._removeInitialHide();
            if (_this2.node.autoplay) _this2.node.play();
          }
        };

        if (this.node.readyState >= this.node.HAVE_CURRENT_DATA || !this.options.waitForMediaLoaded) {
          this._removeInitialHide();
          if (this.node.autoplay) this.node.play();
        } else {
          this.addEventListener(this.node, 'loadeddata', onload);
        }
      } else {
        (0, _objectFitImages2.default)(this.node, {
          watchMQ: this.options.watchMQ
        });

        if (this.node.naturalWidth || !this.options.waitForMediaLoaded) {
          this._removeInitialHide();
        } else {
          var _onload = function _onload() {
            _this2.removeEventListener(_this2.node, 'load', _onload);
            _this2._removeInitialHide();
          };

          this.addEventListener(this.node, 'load', _onload);
        }
      }
    }
  }, {
    key: '_removeInitialHide',
    value: function _removeInitialHide() {
      var _this3 = this;

      window.setTimeout(function () {
        if (_this3.node.parentElement.tagName.toLowerCase() === 'object-fit') {
          _this3.node.parentElement.style.visibility = 'inherit';
          _this3.node.parentElement.style.opacity = 'inherit';
        }

        var featureParent = _this3.node.closest(CLASS_FEATURE);

        if (featureParent) {
          featureParent.classList.remove(_this3.options.classInitialHide);
        }
      }, 0);
    }
  }]);

  return ObjectFit;
}(_jsBase.features.Feature);

/**
 * Default feature options (also used to initialize object-fit-images and iphone-inline-video library).
 *
 * @see https://github.com/bfred-it/object-fit-images
 *
 * @type {Object}
 * @property {Boolean} watchMQ=false
 *   This enables the automatic re-fix of the selected images when the window resizes.
 *   You only need it in some cases
 * @property {Boolean} waitForMediaLoaded=true
 *   Enable to remove initialHideClass after media has been loaded.
 *   Set false to wait only for polyfill initialization.
 * @property {String} defaultObjectFit='cover'
 *   Default object fit used when only `data-object-position` is defined
 * @property {String} defaultObjectPosition='center center'
 *   Default object position used when only `data-object-fit` is defined
 */


ObjectFit.defaultOptions = {
  iPad: true,
  watchMQ: false,
  waitForMediaLoaded: true,
  defaultObjectFit: 'cover',
  defaultObjectPosition: 'center center',
  classInitialHide: '-initial-hide'
};

exports.default = ObjectFit;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*! npm.im/object-fit-images 3.2.3 */


var OFI = 'bfred-it:object-fit-images';
var propRegex = /(object-fit|object-position)\s*:\s*([-\w\s%]+)/g;
var testImg = typeof Image === 'undefined' ? {style: {'object-position': 1}} : new Image();
var supportsObjectFit = 'object-fit' in testImg.style;
var supportsObjectPosition = 'object-position' in testImg.style;
var supportsOFI = 'background-size' in testImg.style;
var supportsCurrentSrc = typeof testImg.currentSrc === 'string';
var nativeGetAttribute = testImg.getAttribute;
var nativeSetAttribute = testImg.setAttribute;
var autoModeEnabled = false;

function createPlaceholder(w, h) {
	return ("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='" + w + "' height='" + h + "'%3E%3C/svg%3E");
}

function polyfillCurrentSrc(el) {
	if (el.srcset && !supportsCurrentSrc && window.picturefill) {
		var pf = window.picturefill._;
		// parse srcset with picturefill where currentSrc isn't available
		if (!el[pf.ns] || !el[pf.ns].evaled) {
			// force synchronous srcset parsing
			pf.fillImg(el, {reselect: true});
		}

		if (!el[pf.ns].curSrc) {
			// force picturefill to parse srcset
			el[pf.ns].supported = false;
			pf.fillImg(el, {reselect: true});
		}

		// retrieve parsed currentSrc, if any
		el.currentSrc = el[pf.ns].curSrc || el.src;
	}
}

function getStyle(el) {
	var style = getComputedStyle(el).fontFamily;
	var parsed;
	var props = {};
	while ((parsed = propRegex.exec(style)) !== null) {
		props[parsed[1]] = parsed[2];
	}
	return props;
}

function setPlaceholder(img, width, height) {
	// Default: fill width, no height
	var placeholder = createPlaceholder(width || 1, height || 0);

	// Only set placeholder if it's different
	if (nativeGetAttribute.call(img, 'src') !== placeholder) {
		nativeSetAttribute.call(img, 'src', placeholder);
	}
}

function onImageReady(img, callback) {
	// naturalWidth is only available when the image headers are loaded,
	// this loop will poll it every 100ms.
	if (img.naturalWidth) {
		callback(img);
	} else {
		setTimeout(onImageReady, 100, img, callback);
	}
}

function fixOne(el) {
	var style = getStyle(el);
	var ofi = el[OFI];
	style['object-fit'] = style['object-fit'] || 'fill'; // default value

	// Avoid running where unnecessary, unless OFI had already done its deed
	if (!ofi.img) {
		// fill is the default behavior so no action is necessary
		if (style['object-fit'] === 'fill') {
			return;
		}

		// Where object-fit is supported and object-position isn't (Safari < 10)
		if (
			!ofi.skipTest && // unless user wants to apply regardless of browser support
			supportsObjectFit && // if browser already supports object-fit
			!style['object-position'] // unless object-position is used
		) {
			return;
		}
	}

	// keep a clone in memory while resetting the original to a blank
	if (!ofi.img) {
		ofi.img = new Image(el.width, el.height);
		ofi.img.srcset = nativeGetAttribute.call(el, "data-ofi-srcset") || el.srcset;
		ofi.img.src = nativeGetAttribute.call(el, "data-ofi-src") || el.src;

		// preserve for any future cloneNode calls
		// https://github.com/bfred-it/object-fit-images/issues/53
		nativeSetAttribute.call(el, "data-ofi-src", el.src);
		if (el.srcset) {
			nativeSetAttribute.call(el, "data-ofi-srcset", el.srcset);
		}

		setPlaceholder(el, el.naturalWidth || el.width, el.naturalHeight || el.height);

		// remove srcset because it overrides src
		if (el.srcset) {
			el.srcset = '';
		}
		try {
			keepSrcUsable(el);
		} catch (err) {
			if (window.console) {
				console.warn('https://bit.ly/ofi-old-browser');
			}
		}
	}

	polyfillCurrentSrc(ofi.img);

	el.style.backgroundImage = "url(\"" + ((ofi.img.currentSrc || ofi.img.src).replace(/"/g, '\\"')) + "\")";
	el.style.backgroundPosition = style['object-position'] || 'center';
	el.style.backgroundRepeat = 'no-repeat';
	el.style.backgroundOrigin = 'content-box';

	if (/scale-down/.test(style['object-fit'])) {
		onImageReady(ofi.img, function () {
			if (ofi.img.naturalWidth > el.width || ofi.img.naturalHeight > el.height) {
				el.style.backgroundSize = 'contain';
			} else {
				el.style.backgroundSize = 'auto';
			}
		});
	} else {
		el.style.backgroundSize = style['object-fit'].replace('none', 'auto').replace('fill', '100% 100%');
	}

	onImageReady(ofi.img, function (img) {
		setPlaceholder(el, img.naturalWidth, img.naturalHeight);
	});
}

function keepSrcUsable(el) {
	var descriptors = {
		get: function get(prop) {
			return el[OFI].img[prop ? prop : 'src'];
		},
		set: function set(value, prop) {
			el[OFI].img[prop ? prop : 'src'] = value;
			nativeSetAttribute.call(el, ("data-ofi-" + prop), value); // preserve for any future cloneNode
			fixOne(el);
			return value;
		}
	};
	Object.defineProperty(el, 'src', descriptors);
	Object.defineProperty(el, 'currentSrc', {
		get: function () { return descriptors.get('currentSrc'); }
	});
	Object.defineProperty(el, 'srcset', {
		get: function () { return descriptors.get('srcset'); },
		set: function (ss) { return descriptors.set(ss, 'srcset'); }
	});
}

function hijackAttributes() {
	function getOfiImageMaybe(el, name) {
		return el[OFI] && el[OFI].img && (name === 'src' || name === 'srcset') ? el[OFI].img : el;
	}
	if (!supportsObjectPosition) {
		HTMLImageElement.prototype.getAttribute = function (name) {
			return nativeGetAttribute.call(getOfiImageMaybe(this, name), name);
		};

		HTMLImageElement.prototype.setAttribute = function (name, value) {
			return nativeSetAttribute.call(getOfiImageMaybe(this, name), name, String(value));
		};
	}
}

function fix(imgs, opts) {
	var startAutoMode = !autoModeEnabled && !imgs;
	opts = opts || {};
	imgs = imgs || 'img';

	if ((supportsObjectPosition && !opts.skipTest) || !supportsOFI) {
		return false;
	}

	// use imgs as a selector or just select all images
	if (imgs === 'img') {
		imgs = document.getElementsByTagName('img');
	} else if (typeof imgs === 'string') {
		imgs = document.querySelectorAll(imgs);
	} else if (!('length' in imgs)) {
		imgs = [imgs];
	}

	// apply fix to all
	for (var i = 0; i < imgs.length; i++) {
		imgs[i][OFI] = imgs[i][OFI] || {
			skipTest: opts.skipTest
		};
		fixOne(imgs[i]);
	}

	if (startAutoMode) {
		document.body.addEventListener('load', function (e) {
			if (e.target.tagName === 'IMG') {
				fix(e.target, {
					skipTest: opts.skipTest
				});
			}
		}, true);
		autoModeEnabled = true;
		imgs = 'img'; // reset to a generic selector for watchMQ
	}

	// if requested, watch media queries for object-fit change
	if (opts.watchMQ) {
		window.addEventListener('resize', fix.bind(null, imgs, {
			skipTest: opts.skipTest
		}));
	}
}

fix.supportsObjectFit = supportsObjectFit;
fix.supportsObjectPosition = supportsObjectPosition;

hijackAttributes();

module.exports = fix;


/***/ }),
/* 3 */
/***/ (function(module, exports) {

/**
 * Object Fit Videos
 * Polyfill for object-fit and object-position CSS properties on video elements
 * Covers IE9, IE10, IE11, Edge, Safari <10
 *
 * Usage
 * In your CSS, add a special font-family tag for IE/Edge
 * video {
 *   object-fit: cover;
 *   font-family: 'object-fit: cover;';
 * }
 *
 * Before the closing body tag, or whenever the DOM is ready,
 * make the JavaScript call
 * objectFitVideos();
 *
 * All video elements with the special CSS property will be targeted
 *
 * @license  MIT (https://opensource.org/licenses/MIT)
 * @author   Todd Miller <todd.miller@tricomb2b.com>
 * @version  1.0.2
 * @changelog
 * 2016-08-19 - Adds object-position support.
 * 2016-08-19 - Add throttle function for more performant resize events
 * 2016-08-19 - Initial release with object-fit support, and
 *              object-position default 'center'
 * 2016-10-14 - No longer relies on window load event, instead requires a specific
 *              function call to initialize the videos for object fit and position.
 * 2016-11-28 - Support CommonJS environment, courtesy of @msorensson
 * 2016-12-05 - Refactors the throttling function to support IE
 * 2017-09-26 - Fix an issue with autplay not working on polyfilled videos
 *            - Adds the capability to specify elements to polyfill,
 *              instead of just checking every video element for the
 *              CSS property. Slight performance gain in most usecases,
 *              and a bigger gain in a few usecases.
 * 2017-10-24 - Add user agent check to enable polyfill for all Edge browsers.
 *              object-fit is supported on Edge >= 16, but currently just for images.
 */
var objectFitVideos = function (videos) {
  'use strict';

  var isEdge = navigator.userAgent.indexOf('Edge/') >= 0;

  var testImg                = new Image(),
      supportsObjectFit      = 'object-fit' in testImg.style && !isEdge,
      supportsObjectPosition = 'object-position' in testImg.style && !isEdge,
      propRegex              = /(object-fit|object-position)\s*:\s*([-\w\s%]+)/g;

  if (!supportsObjectFit || !supportsObjectPosition) {
    initialize(videos);
    throttle('resize', 'optimizedResize');
  }

  /**
   * Parse the style and look for the special font-family tag
   * @param  {object} $el The element to parse
   * @return {object}     The font-family properties we're interested in
   */
  function getStyle ($el) {
    var style  = getComputedStyle($el).fontFamily,
        parsed = null,
        props  = {};

      while ((parsed = propRegex.exec(style)) !== null) {
        props[parsed[1]] = parsed[2];
      }

      if (props['object-position'])
        return parsePosition(props);

      return props;
  }

  /**
   * Initialize all the relevant video elements and get them fitted
   */
  function initialize (videos) {
    var index = -1;

    if (!videos) {
      // if no videos given, query all video elements
      videos = document.querySelectorAll('video');
    } else if (!('length' in videos)) {
      // convert to an array for proper looping if an array or NodeList
      // was not given
      videos = [videos];
    }

    while (videos[++index]) {
      var style = getStyle(videos[index]);

      // only do work if the property is on the element
      if (style['object-fit'] || style['object-position']) {
        // set the default values
        style['object-fit'] = style['object-fit'] || 'fill';
        fitIt(videos[index], style);
      }
    }
  }

  /**
   * Object Fit
   * @param  {object} $el Element to fit
   * @return {object}     The element's relevant properties
   */
  function fitIt ($el, style) {
    // fill is the default behavior, no action is necessary
    if (style['object-fit'] === 'fill')
      return;

    // convenience style properties on the source element
    var setCss = $el.style,
        getCss = window.getComputedStyle($el);

    // create and insert a wrapper element
    var $wrap = document.createElement('object-fit');
    $wrap.appendChild($el.parentNode.replaceChild($wrap, $el));

    // style the wrapper element to mostly match the source element
    var wrapCss = {
      height:    '100%',
      width:     '100%',
      boxSizing: 'content-box',
      display:   'inline-block',
      overflow:  'hidden'
    };

    'backgroundColor backgroundImage borderColor borderStyle borderWidth bottom fontSize lineHeight left opacity margin position right top visibility'.replace(/\w+/g, function (key) {
      wrapCss[key] = getCss[key];
    });

    for (var key in wrapCss)
      $wrap.style[key] = wrapCss[key];

    // give the source element some saner styles
    setCss.border  = setCss.margin = setCss.padding = 0;
    setCss.display = 'block';
    setCss.opacity = 1;

    // set up the event handlers
    $el.addEventListener('loadedmetadata', doWork);
    window.addEventListener('optimizedResize', doWork);

    // we may have missed the loadedmetadata event, so if the video has loaded
    // enough data, just drop the event listener and execute
    if ($el.readyState >= 1) {
      $el.removeEventListener('loadedmetadata', doWork);
      doWork();
    }

    /**
     * Do the actual sizing. Math.
     * @methodOf fitIt
     */
    function doWork () {
      // the actual size and ratio of the video
      // we do this here, even though it doesn't change, because
      // at this point we can be sure the metadata has loaded
      var videoWidth  = $el.videoWidth,
          videoHeight = $el.videoHeight,
          videoRatio  = videoWidth / videoHeight;

      var wrapWidth  = $wrap.clientWidth,
          wrapHeight = $wrap.clientHeight,
          wrapRatio  = wrapWidth / wrapHeight;

      var newHeight = 0,
          newWidth  = 0;
      setCss.marginLeft = setCss.marginTop = 0;

      // basically we do the opposite action for contain and cover,
      // depending on whether the video aspect ratio is less than or
      // greater than the wrapper's aspect ratio
      if (videoRatio < wrapRatio ?
          style['object-fit'] === 'contain' : style['object-fit'] === 'cover') {
        newHeight = wrapHeight * videoRatio;
        newWidth  = wrapWidth / videoRatio;

        setCss.width  = Math.round(newHeight) + 'px';
        setCss.height = wrapHeight + 'px';

        if (style['object-position-x'] === 'left')
          setCss.marginLeft = 0;
        else if (style['object-position-x'] === 'right')
          setCss.marginLeft = Math.round(wrapWidth - newHeight) + 'px';
        else
          setCss.marginLeft = Math.round((wrapWidth - newHeight) / 2) + 'px';
      } else {
        newWidth = wrapWidth / videoRatio;

        setCss.width     = wrapWidth + 'px';
        setCss.height    = Math.round(newWidth) + 'px';

        if (style['object-position-y'] === 'top')
          setCss.marginTop = 0;
        else if (style['object-position-y'] === 'bottom')
          setCss.marginTop = Math.round(wrapHeight - newWidth) + 'px';
        else
          setCss.marginTop = Math.round((wrapHeight - newWidth) / 2) + 'px';
      }

      // play the video if autoplay is set
      if ($el.autoplay)
        $el.play();
    }
  }

  /**
   * Split the object-position property into x and y position properties
   * @param  {object} style Relevant element styles
   * @return {object}       The style object with the added x and y props
   */
  function parsePosition (style) {
    if (~style['object-position'].indexOf('left'))
      style['object-position-x'] = 'left';
    else if (~style['object-position'].indexOf('right'))
      style['object-position-x'] = 'right';
    else
      style['object-position-x'] = 'center';

    if (~style['object-position'].indexOf('top'))
      style['object-position-y'] = 'top';
    else if (~style['object-position'].indexOf('bottom'))
      style['object-position-y'] = 'bottom';
    else
      style['object-position-y'] = 'center';

    return style;
  }

  /**
   * Throttle an event with RequestAnimationFrame API for better performance
   * @param  {string} type The event to throttle
   * @param  {string} name Custom event name to listen for
   * @param  {object} obj  Optional object to attach the event to
   */
  function throttle (type, name, obj) {
    obj = obj || window;
    var running = false,
        evt     = null;

    // IE does not support the CustomEvent constructor
    // so if that fails do it the old way
    try {
      evt = new CustomEvent(name);
    } catch (e) {
      evt = document.createEvent('Event');
      evt.initEvent(name, true, true);
    }

    var func = function () {
      if (running) return;

      running = true;
      requestAnimationFrame(function () {
        obj.dispatchEvent(evt);
        running = false;
      });
    };

    obj.addEventListener(type, func);
  }
};

if (typeof module !== 'undefined' && typeof module.exports !== 'undefined')
  module.exports = objectFitVideos;


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_intervalometer__ = __webpack_require__(5);
/*! npm.im/iphone-inline-video 2.2.2 */


function preventEvent(element, eventName, test) {
	function handler(e) {
		if (!test || test(element, eventName)) {
			e.stopImmediatePropagation();
			// // console.log(eventName, 'prevented on', element);
		}
	}
	element.addEventListener(eventName, handler);

	// Return handler to allow to disable the prevention. Usage:
	// const preventionHandler = preventEvent(el, 'click');
	// el.removeEventHandler('click', preventionHandler);
	return handler;
}

function proxyProperty(object, propertyName, sourceObject, copyFirst) {
	function get() {
		return sourceObject[propertyName];
	}
	function set(value) {
		sourceObject[propertyName] = value;
	}

	if (copyFirst) {
		set(object[propertyName]);
	}

	Object.defineProperty(object, propertyName, {get: get, set: set});
}

function proxyEvent(object, eventName, sourceObject) {
	sourceObject.addEventListener(eventName, function () { return object.dispatchEvent(new Event(eventName)); });
}

function dispatchEventAsync(element, type) {
	Promise.resolve().then(function () {
		element.dispatchEvent(new Event(type));
	});
}

var iOS8or9 = typeof document === 'object' && 'object-fit' in document.head.style && !matchMedia('(-webkit-video-playable-inline)').matches;

var IIV = 'bfred-it:iphone-inline-video';
var IIVEvent = 'bfred-it:iphone-inline-video:event';
var IIVPlay = 'bfred-it:iphone-inline-video:nativeplay';
var IIVPause = 'bfred-it:iphone-inline-video:nativepause';

/**
 * UTILS
 */

function getAudioFromVideo(video) {
	var audio = new Audio();
	proxyEvent(video, 'play', audio);
	proxyEvent(video, 'playing', audio);
	proxyEvent(video, 'pause', audio);
	audio.crossOrigin = video.crossOrigin;

	// 'data:' causes audio.networkState > 0
	// which then allows to keep <audio> in a resumable playing state
	// i.e. once you set a real src it will keep playing if it was if .play() was called
	audio.src = video.src || video.currentSrc || 'data:';

	// // if (audio.src === 'data:') {
	//   TODO: wait for video to be selected
	// // }
	return audio;
}

var lastRequests = [];
var requestIndex = 0;
var lastTimeupdateEvent;

function setTime(video, time, rememberOnly) {
	// Allow one timeupdate event every 200+ ms
	if ((lastTimeupdateEvent || 0) + 200 < Date.now()) {
		video[IIVEvent] = true;
		lastTimeupdateEvent = Date.now();
	}
	if (!rememberOnly) {
		video.currentTime = time;
	}
	lastRequests[++requestIndex % 3] = time * 100 | 0 / 100;
}

function isPlayerEnded(player) {
	return player.driver.currentTime >= player.video.duration;
}

function update(timeDiff) {
	var player = this;
	// // console.log('update', player.video.readyState, player.video.networkState, player.driver.readyState, player.driver.networkState, player.driver.paused);
	if (player.video.readyState >= player.video.HAVE_FUTURE_DATA) {
		if (!player.hasAudio) {
			player.driver.currentTime = player.video.currentTime + ((timeDiff * player.video.playbackRate) / 1000);
			if (player.video.loop && isPlayerEnded(player)) {
				player.driver.currentTime = 0;
			}
		}
		setTime(player.video, player.driver.currentTime);
	} else if (player.video.networkState === player.video.NETWORK_IDLE && player.video.buffered.length === 0) {
		// This should happen when the source is available but:
		// - it's potentially playing (.paused === false)
		// - it's not ready to play
		// - it's not loading
		// If it hasAudio, that will be loaded in the 'emptied' handler below
		player.video.load();
		// // console.log('Will load');
	}

	// // console.assert(player.video.currentTime === player.driver.currentTime, 'Video not updating!');

	if (player.video.ended) {
		delete player.video[IIVEvent]; // Allow timeupdate event
		player.video.pause(true);
	}
}

/**
 * METHODS
 */

function play() {
	// // console.log('play');
	var video = this;
	var player = video[IIV];

	// If it's fullscreen, use the native player
	if (video.webkitDisplayingFullscreen) {
		video[IIVPlay]();
		return;
	}

	if (player.driver.src !== 'data:' && player.driver.src !== video.src) {
		// // console.log('src changed on play', video.src);
		setTime(video, 0, true);
		player.driver.src = video.src;
	}

	if (!video.paused) {
		return;
	}
	player.paused = false;

	if (video.buffered.length === 0) {
		// .load() causes the emptied event
		// the alternative is .play()+.pause() but that triggers play/pause events, even worse
		// possibly the alternative is preventing this event only once
		video.load();
	}

	player.driver.play();
	player.updater.start();

	if (!player.hasAudio) {
		dispatchEventAsync(video, 'play');
		if (player.video.readyState >= player.video.HAVE_ENOUGH_DATA) {
			// // console.log('onplay');
			dispatchEventAsync(video, 'playing');
		}
	}
}
function pause(forceEvents) {
	// // console.log('pause');
	var video = this;
	var player = video[IIV];

	player.driver.pause();
	player.updater.stop();

	// If it's fullscreen, the developer the native player.pause()
	// This is at the end of pause() because it also
	// needs to make sure that the simulation is paused
	if (video.webkitDisplayingFullscreen) {
		video[IIVPause]();
	}

	if (player.paused && !forceEvents) {
		return;
	}

	player.paused = true;
	if (!player.hasAudio) {
		dispatchEventAsync(video, 'pause');
	}

	// Handle the 'ended' event only if it's not fullscreen
	if (video.ended && !video.webkitDisplayingFullscreen) {
		video[IIVEvent] = true;
		dispatchEventAsync(video, 'ended');
	}
}

/**
 * SETUP
 */

function addPlayer(video, hasAudio) {
	var player = {};
	video[IIV] = player;
	player.paused = true; // Track whether 'pause' events have been fired
	player.hasAudio = hasAudio;
	player.video = video;
	player.updater = Object(__WEBPACK_IMPORTED_MODULE_0_intervalometer__["a" /* frameIntervalometer */])(update.bind(player));

	if (hasAudio) {
		player.driver = getAudioFromVideo(video);
	} else {
		video.addEventListener('canplay', function () {
			if (!video.paused) {
				// // console.log('oncanplay');
				dispatchEventAsync(video, 'playing');
			}
		});
		player.driver = {
			src: video.src || video.currentSrc || 'data:',
			muted: true,
			paused: true,
			pause: function () {
				player.driver.paused = true;
			},
			play: function () {
				player.driver.paused = false;
				// Media automatically goes to 0 if .play() is called when it's done
				if (isPlayerEnded(player)) {
					setTime(video, 0);
				}
			},
			get ended() {
				return isPlayerEnded(player);
			}
		};
	}

	// .load() causes the emptied event
	video.addEventListener('emptied', function () {
		// // console.log('driver src is', player.driver.src);
		var wasEmpty = !player.driver.src || player.driver.src === 'data:';
		if (player.driver.src && player.driver.src !== video.src) {
			// // console.log('src changed to', video.src);
			setTime(video, 0, true);
			player.driver.src = video.src;
			// Playing videos will only keep playing if no src was present when .play()’ed
			if (wasEmpty || (!hasAudio && video.autoplay)) {
				player.driver.play();
			} else {
				player.updater.stop();
			}
		}
	}, false);

	// Stop programmatic player when OS takes over
	video.addEventListener('webkitbeginfullscreen', function () {
		if (!video.paused) {
			// Make sure that the <audio> and the syncer/updater are stopped
			video.pause();

			// Play video natively
			video[IIVPlay]();
		} else if (hasAudio && player.driver.buffered.length === 0) {
			// If the first play is native,
			// the <audio> needs to be buffered manually
			// so when the fullscreen ends, it can be set to the same current time
			player.driver.load();
		}
	});
	if (hasAudio) {
		video.addEventListener('webkitendfullscreen', function () {
			// Sync audio to new video position
			player.driver.currentTime = video.currentTime;
			// // console.assert(player.driver.currentTime === video.currentTime, 'Audio not synced');
		});

		// Allow seeking
		video.addEventListener('seeking', function () {
			if (lastRequests.indexOf(video.currentTime * 100 | 0 / 100) < 0) {
				// // console.log('User-requested seeking');
				player.driver.currentTime = video.currentTime;
			}
		});
	}
}

function preventWithPropOrFullscreen(el) {
	var isAllowed = el[IIVEvent];
	delete el[IIVEvent];
	return !el.webkitDisplayingFullscreen && !isAllowed;
}

function overloadAPI(video) {
	var player = video[IIV];
	video[IIVPlay] = video.play;
	video[IIVPause] = video.pause;
	video.play = play;
	video.pause = pause;
	proxyProperty(video, 'paused', player.driver);
	proxyProperty(video, 'muted', player.driver, true);
	proxyProperty(video, 'playbackRate', player.driver, true);
	proxyProperty(video, 'ended', player.driver);
	proxyProperty(video, 'loop', player.driver, true);

	// IIV works by seeking 60 times per second.
	// These events are now useless.
	preventEvent(video, 'seeking', function (el) { return !el.webkitDisplayingFullscreen; });
	preventEvent(video, 'seeked', function (el) { return !el.webkitDisplayingFullscreen; });

	// Limit timeupdate events
	preventEvent(video, 'timeupdate', preventWithPropOrFullscreen);

	// Prevent occasional native ended events
	preventEvent(video, 'ended', preventWithPropOrFullscreen);
}

function enableInlineVideo(video, opts) {
	if ( opts === void 0 ) opts = {};

	// Stop if already enabled
	if (video[IIV]) {
		return;
	}

	// Allow the user to skip detection
	if (!opts.everywhere) {
		// Only iOS8 and 9 are supported
		if (!iOS8or9) {
			return;
		}

		// Stop if it's not an allowed device
		if (!(opts.iPad || opts.ipad ? /iPhone|iPod|iPad/ : /iPhone|iPod/).test(navigator.userAgent)) {
			return;
		}
	}

	// Try to pause
	video.pause();

	// Prevent autoplay.
	// An non-started autoplaying video can't be .pause()'d
	var willAutoplay = video.autoplay;
	video.autoplay = false;

	addPlayer(video, !video.muted);
	overloadAPI(video);
	video.classList.add('IIV');

	// Autoplay
	if (video.muted && willAutoplay) {
		video.play();
		video.addEventListener('playing', function restoreAutoplay() {
			video.autoplay = true;
			video.removeEventListener('playing', restoreAutoplay);
		});
	}

	if (!/iPhone|iPod|iPad/.test(navigator.platform)) {
		console.warn('iphone-inline-video is not guaranteed to work in emulated environments');
	}
}

/* harmony default export */ __webpack_exports__["default"] = (enableInlineVideo);


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export intervalometer */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return frameIntervalometer; });
/* unused harmony export timerIntervalometer */
/*! npm.im/intervalometer */
function intervalometer(cb, request, cancel, requestParameter) {
	var requestId;
	var previousLoopTime;
	function loop(now) {
		// must be requested before cb() because that might call .stop()
		requestId = request(loop, requestParameter);

		// called with "ms since last call". 0 on start()
		cb(now - (previousLoopTime || now));

		previousLoopTime = now;
	}
	return {
		start: function start() {
			if (!requestId) { // prevent double starts
				loop(0);
			}
		},
		stop: function stop() {
			cancel(requestId);
			requestId = null;
			previousLoopTime = 0;
		}
	};
}

function frameIntervalometer(cb) {
	return intervalometer(cb, requestAnimationFrame, cancelAnimationFrame);
}

function timerIntervalometer(cb, delay) {
	return intervalometer(cb, setTimeout, clearTimeout, delay);
}



/***/ })
/******/ ]);
});
//# sourceMappingURL=main.min.js.map